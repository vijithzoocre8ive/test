export declare var concurrency: number;
export declare class MultiError extends Error {
    list: Array<Error>;
    constructor(list: Array<Error>);
}
export interface Options {
    concurrency: number;
}
export declare function each<T1, T2>(list: T1[], action: {
    (value: T1): Promise<T2>;
}, options?: Options): Promise<void>;
export declare function filter<T>(list: T[], action: {
    (value: T, index: number, list: T[]): Promise<boolean>;
}, options?: Options): Promise<T[]>;
export declare function invoke(list: {
    (): Promise<void>;
}[], options?: Options): Promise<void>;
export declare function map<T1, T2>(list: T1[], action: {
    (value: T1): Promise<T2>;
}, options?: Options): Promise<T2[]>;
export declare function pool(size: number, task: {
    (): Promise<boolean>;
}): Promise<void>;
